# -*- coding: utf-8 -*-
"""HW2_Selenium.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eBWoVXzUMbEFlvydPCbbRE8L9bKLXyfW
"""

# Connetced yourself Cloud Storage
from google.colab import drive
drive.mount('/content/gdrive/', force_remount=True)

import os
os.chdir("/content/gdrive/My Drive/11202_latia/")
os.listdir()

# Commented out IPython magic to ensure Python compatibility.
# %%shell
# # Ubuntu no longer distributes chromium-browser outside of snap
# #
# # Proposed solution: https://askubuntu.com/questions/1204571/how-to-install-chromium-without-snap
# 
# # Add debian buster
# cat > /etc/apt/sources.list.d/debian.list <<'EOF'
# deb [arch=amd64 signed-by=/usr/share/keyrings/debian-buster.gpg] http://deb.debian.org/debian buster main
# deb [arch=amd64 signed-by=/usr/share/keyrings/debian-buster-updates.gpg] http://deb.debian.org/debian buster-updates main
# deb [arch=amd64 signed-by=/usr/share/keyrings/debian-security-buster.gpg] http://deb.debian.org/debian-security buster/updates main
# EOF
# 
# # Add keys
# apt-key adv --keyserver keyserver.ubuntu.com --recv-keys DCC9EFBF77E11517
# apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 648ACFD622F3D138
# apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 112695A0E562B32A
# 
# apt-key export 77E11517 | gpg --dearmour -o /usr/share/keyrings/debian-buster.gpg
# apt-key export 22F3D138 | gpg --dearmour -o /usr/share/keyrings/debian-buster-updates.gpg
# apt-key export E562B32A | gpg --dearmour -o /usr/share/keyrings/debian-security-buster.gpg
# 
# # Prefer debian repo for chromium* packages only
# # Note the double-blank lines between entries
# cat > /etc/apt/preferences.d/chromium.pref << 'EOF'
# Package: *
# Pin: release a=eoan
# Pin-Priority: 500
# 
# Package: *
# Pin: origin "deb.debian.org"
# Pin-Priority: 300
# 
# 
# Package: chromium*
# Pin: origin "deb.debian.org"
# Pin-Priority: 700
# EOF
# 
# # Install chromium and chromium-driver
# apt-get update
# apt-get install chromium chromium-driver
# 
# # Install selenium
# pip install selenium

!pip install selenium

# 導入Selenium的webdriver模組，用於控制Chrome瀏覽器。
from selenium import webdriver

# 從Selenium函式庫的common.by模組中導入`By`，用於指定元素的定位方式。
from selenium.webdriver.common.by import By

# 導入其他需要的模組
from selenium import webdriver
import pandas as pd
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup
import csv

# 建立ChromeOptions物件，這個物件用於設定Chrome瀏覽器的選項。
chrome_options = webdriver.ChromeOptions()

# 使用add_argument()方法添加--headless參數，使Chrome以headless模式運行，即在後台運行，不顯示GUI界面。
chrome_options.add_argument('--headless')

# 使用add_argument()方法添加--no-sandbox參數，這是一個必要的參數，用於解決在某些環境下的運行問題。
chrome_options.add_argument('--no-sandbox')

# 將 headless 屬性設置為 True。
chrome_options.headless = True

# 初始化Chrome WebDriver，並傳遞Chromedriver的路徑和選項。
driver = webdriver.Chrome(options=chrome_options)

# 設置隱式等待時間為10秒。隱式等待是在查找元素時的一種等待方式，
# 如果WebDriver沒有找到元素，它會等待一定的時間再進行查找，直到超過設定的時間為止。
driver.implicitly_wait(10)

# 使用get方法訪問指定的URL，在此是"https://water.taiwanstat.com/"。
driver.get('https://water.taiwanstat.com/')

# 使用find_elements()方法按類別名稱（CLASS_NAME）查找所有符合的指定元素，在此是`name`。
names = []
for element in driver.find_elements(By.CLASS_NAME, "name"):
    names.append(element.text.strip())

# 使用find_elements()方法按類別名稱（CLASS_NAME）查找所有符合的指定元素，在此是`volumn`。
volumns = []
for element in driver.find_elements(By.CLASS_NAME, "volumn"):
    volumns.append(element.text.strip())

# 建立字典
dict_data={
'name':names,
'volumn':volumns,
}

# 建立DataFrame
df_reservoir = pd.DataFrame(dict_data)

# 儲存到CSV檔案
df_reservoir.to_csv('reservoir.csv', index=False)

# 關閉瀏覽器
driver.quit()